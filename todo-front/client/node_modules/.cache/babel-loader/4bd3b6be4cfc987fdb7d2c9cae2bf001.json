{"ast":null,"code":"var _jsxFileName = \"/home/user/\\u041F\\u043B\\u043E\\u0442/projects/todo/todo-front/client/src/modules/contacts/ContactsContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Contacts from \"./components/Contacts\";\nimport axios from \"axios\";\nimport emailValidator from \"../../utils/EmailValidator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactsContainer = props => {\n  _s();\n\n  const [formState, setFormState] = useState({\n    name: \"\",\n    surname: \"\",\n    email: \"\",\n    phone: null,\n    message: \"\"\n  });\n  const [formStateError, setFormStateError] = useState({\n    name: \"\",\n    surname: \"\",\n    email: \"\",\n    phone: null,\n    message: \"\"\n  });\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  const handleInput = e => {\n    setFormState({ ...formState,\n      [e.target.name]: e.target.value\n    });\n    validateForm();\n  };\n\n  const validateForm = () => {\n    let isValid = true;\n    let nameError = \"\";\n    let surnameError = \"\";\n    let emailError = \"\";\n    let phoneError = \"\";\n    let messageError = \"\";\n\n    if (!formState.name.length || formState.name.length <= 1) {\n      isValid = false;\n      nameError = \"Моля въведете вашето име\";\n    }\n\n    if (!formState.surname.length || formState.surname.length < 1) {\n      isValid = false;\n      surnameError = \"Моля въведете вашата фамилия\";\n    }\n\n    if (!formState.email.length || formState.email.length < 1 || !emailValidator(formState.email)) {\n      isValid = false;\n      emailError = \"Моля въведете валиден имейл\";\n    }\n\n    if (!formState.phone || formState.phone < 1 && formState.phone > 10) {\n      isValid = false;\n      phoneError = \"Моля въведете вашия телефонен номер\";\n    }\n\n    if (!formState.message.length || formState.message.length < 1) {\n      isValid = false;\n      messageError = \"Моля въведете вашия коментар\";\n    }\n\n    setFormStateError({ ...formStateError,\n      name: nameError,\n      surname: surnameError,\n      message: messageError,\n      phone: phoneError,\n      email: emailError\n    });\n    return isValid;\n  };\n\n  const resetForm = () => {\n    setFormStateError({\n      name: \"\",\n      surname: \"\",\n      email: \"\",\n      phone: \"\",\n      message: \"\"\n    });\n  };\n\n  const handleSubmit = () => {\n    let isContactFormValid = validateForm();\n\n    if (!isContactFormValid) {\n      return;\n    }\n\n    resetForm();\n    let contact = {\n      name: formState.name,\n      surname: formState.surname,\n      email: formState.email,\n      phone: formState.phone,\n      message: formState.message\n    };\n    axios.post(`http://localhost:4000/contacts`, {\n      contact\n    }).then(res => {\n      setSuccessMessage(\"Вие успешно изпратихте вашето запитване! Ще изпратим нашия отговор, възможно най-бързо, към вашия имейл!\");\n    }).catch(e => console.error(e));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Contacts, {\n    handleSubmit: handleSubmit,\n    formState: formState,\n    successMessage: successMessage,\n    formStateError: formStateError,\n    handleInput: handleInput\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactsContainer, \"zbVla6t+FlDedVutGZybHQoBi7g=\");\n\n_c = ContactsContainer;\nexport default ContactsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactsContainer\");","map":{"version":3,"sources":["/home/user/Плот/projects/todo/todo-front/client/src/modules/contacts/ContactsContainer.js"],"names":["React","useEffect","useState","Contacts","axios","emailValidator","ContactsContainer","props","formState","setFormState","name","surname","email","phone","message","formStateError","setFormStateError","successMessage","setSuccessMessage","handleInput","e","target","value","validateForm","isValid","nameError","surnameError","emailError","phoneError","messageError","length","resetForm","handleSubmit","isContactFormValid","contact","post","then","res","catch","console","error"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Contacts from \"./components/Contacts\";\nimport axios from \"axios\";\nimport emailValidator from \"../../utils/EmailValidator\";\n\nconst ContactsContainer = (props) => {\n  const [formState, setFormState] = useState({\n    name: \"\",\n    surname: \"\",\n    email: \"\",\n    phone: null,\n    message: \"\",\n  });\n  const [formStateError, setFormStateError] = useState({\n    name: \"\",\n    surname: \"\",\n    email: \"\",\n    phone: null,\n    message: \"\",\n  });\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  const handleInput = (e) => {\n    setFormState({ ...formState, [e.target.name]: e.target.value });\n    validateForm();\n  };\n  const validateForm = () => {\n    let isValid = true;\n    let nameError = \"\";\n    let surnameError = \"\";\n    let emailError = \"\";\n    let phoneError = \"\";\n    let messageError = \"\";\n    if (!formState.name.length || formState.name.length <= 1) {\n      isValid = false;\n      nameError = \"Моля въведете вашето име\";\n    }\n    if (!formState.surname.length || formState.surname.length < 1) {\n      isValid = false;\n      surnameError = \"Моля въведете вашата фамилия\";\n    }\n    if (\n      !formState.email.length ||\n      formState.email.length < 1 ||\n      !emailValidator(formState.email)\n    ) {\n      isValid = false;\n      emailError = \"Моля въведете валиден имейл\";\n    }\n    if (!formState.phone || (formState.phone < 1 && formState.phone > 10)) {\n      isValid = false;\n      phoneError = \"Моля въведете вашия телефонен номер\";\n    }\n    if (!formState.message.length || formState.message.length < 1) {\n      isValid = false;\n      messageError = \"Моля въведете вашия коментар\";\n    }\n    setFormStateError({\n      ...formStateError,\n      name: nameError,\n      surname: surnameError,\n      message: messageError,\n      phone: phoneError,\n      email: emailError,\n    });\n    return isValid;\n  };\n  const resetForm = () => {\n    setFormStateError({\n      name: \"\",\n      surname: \"\",\n      email: \"\",\n      phone: \"\",\n      message: \"\",\n    });\n  };\n\n  const handleSubmit = () => {\n    let isContactFormValid = validateForm();\n\n    if (!isContactFormValid) {\n      return;\n    }\n\n    resetForm();\n    let contact = {\n      name: formState.name,\n      surname: formState.surname,\n      email: formState.email,\n      phone: formState.phone,\n      message: formState.message,\n    };\n    axios\n      .post(`http://localhost:4000/contacts`, { contact })\n      .then((res) => {\n        setSuccessMessage(\n          \"Вие успешно изпратихте вашето запитване! Ще изпратим нашия отговор, възможно най-бързо, към вашия имейл!\"\n        );\n      })\n      .catch((e) => console.error(e));\n  };\n  return (\n    <Contacts\n      handleSubmit={handleSubmit}\n      formState={formState}\n      successMessage={successMessage}\n      formStateError={formStateError}\n      handleInput={handleInput}\n    />\n  );\n};\n\nexport default ContactsContainer;\n"]},"metadata":{},"sourceType":"module"}